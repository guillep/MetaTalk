Object = nil [

	initialize := []
	= anObject := [^ self == anObject.]
	== anObject := [^ <PrimitiveCall objEq>.]
	copy := [^ <PrimitiveCall objCopy>.]
	asString := [^ ''''.]
	asList := [^ {self.}.]
	print := [self asString print.]

]

Class = Object [
	
	initialize := [^ <PrimitiveCall classInitialize>.]
	allocate := [^ <PrimitiveCall classAllocate>.]
	new := [
		^self allocate initialize.
	]
	
]

Block = Object [

	initialize := [^ <PrimitiveCall blockInitialize>.]
	value := [^ <PrimitiveCall blockValue>.]	
	valueWithArgs: aList := [^ <PrimitiveCall blockValueWithArgs>.]
	whileTrue: aBlock := [
		self value ifTrue: [
			aBlock value.
			self whileTrue: aBlock.
		].
	]
	
]

Method = Object []

UndefinedObject = Object [
	
	asString := [^ ''nil''.]	
	
]

Number = Object [

	initialize := [^ <PrimitiveCall numberInitialize>.]
	= aMagnitude := [^ <PrimitiveCall numberEq>.]
	+ aNumber := [^ <PrimitiveCall numberAdd>.]
	- aNumber := [^ <PrimitiveCall numberSub>.]
	/ aNumber  := [^ <PrimitiveCall numberDiv>.]
	* aNumber := [^ <PrimitiveCall numberMul>.]
	< aNumber := [^ <PrimitiveCall numberLt>.]
	> aNumber := [^ <PrimitiveCall numberGt>.]
	floor := [^ <PrimitiveCall numberFloor>.]
	ceil := [^ <PrimitiveCall numberCeil>.]
	to: aNumber := [
		|iterator end list|
		list := {}.
		iterator := self.
		end := aNumber asNumber.
		[iterator < (end + 1).] whileTrue: [
			list add: iterator.
			iterator := iterator + 1.
		].
		^ list.
	]
	asNumber := [^ self.]
	asString := [^ <PrimitiveCall numberAsString>.]
	
]

Char = Number [
	
	asCharacter := [^ self.]
	asString := [^ String new add: self.]
	
]

Boolean = Object [

	initialize := [^ False new.]	

]

True = Boolean [

	initialize := []	
	| aBoolean := [^ true.]
	& aBoolean := [^ aBoolean.]
	not := [^ false.]
	ifTrue: aBlock := [^ aBlock value.]
	ifFalse: aBlock := [^ nil.]
	ifTrue: aBlock ifFalse: anotherBlock := [^ aBlock value.]
	asString := [^ ''true''.]
	
]

False = Boolean [
	
	initialize := []
	| aBoolean := [^ aBoolean.]
	& aBoolean := [^ false.]
	not := [^ true.]
	ifTrue: aBlock := [^ nil.]
	ifFalse: aBlock := [^ aBlock value.]
	ifTrue: aBlock ifFalse: anotherBlock := [^ anotherBlock value.]
	asString := [^ ''false''.]
	
]

List = Object [

	initialize := [^ <PrimitiveCall listInitialize>.]	
	size := [^ <PrimitiveCall listSize>.]
	add: anObject := [<PrimitiveCall listAdd>.]
	remove: anObject := [<PrimitiveCall listRemove>.]
	
	indexOf: anObject := [
		self indexAndValuesDo: [:index :value |
			(value = anObject) ifTrue: [
				^ index.	
			].
		].
		^ nil.
	]
	
	at: index := [^ <PrimitiveCall listAt>.]
	at: index put: anObject := [<PrimitiveCall listAtPut>.]
	= aList := [
		|list|
		list := aList asList.
		(self size = list size) ifFalse: [^ false.].
		self indexAndValuesDo: [:index :value |
			(value = (list at: index)) ifFalse: [
				^ false.	
			].
		].
		^ true.
	]
	
	, aList := [
		^ <PrimitiveCall listConCat>.
	]
	
	
	do: aBlock := [
		|size iterator|
		size := self size.
		iterator := 1.
		[(iterator = (size+1)) not.] whileTrue: [
			aBlock valueWithArgs: {self at: iterator.}.
			iterator := iterator + 1.
		].
	]
	
	indexAndValuesDo: aBlock := [
		|index|
		index := 1.
		self do: [:value |
			aBlock valueWithArgs: {index. value.}.
			index := index + 1.
		].	
	]

	asString := [
		|str|
		str := ''{ ''.
		self do: [:item | str := str , item asString , ''. ''.].
		^ str , ''}''.
	]

	asList := [^ self.]
]

String = List [

	add: aChar := [super add: (aChar asCharacter).]
	at: index put: aChar := [super at: index put: (aChar asCharacter).]
	print := [<PrimitiveCall stringPrint>.]
	asString := [^ self.]
	
]

Dict = List [

	add: aKeyValueList := [
		(aKeyValueList asList size = 2)	ifTrue: [
				super add: aKeyValueList.
		] ifFalse: [
				^ nil.
		].
	]

	remove: aKey := [
		self do: [:value | 
			((value at: 1) = aKey) ifTrue: [
				super remove: value.
				^ value.
			].
		].	
	]

	keyOf: aValue := [
		self do: [:value | 
			((value at: 2) = value) ifTrue: [
				^ value at: 1.
			].
		].
		^ nil.	
	]

	atKey: aKey := [
		self do: [:value | 
			((value at: 1) = aKey) ifTrue: [
				^ value at: 2.
			].
		].
		^ nil.
	]

	atKey: aKey put: aValue := [
		self do: [:value | 
			((value at: 1) = aKey) ifTrue: [
				value at: 2 put: aValue.
			].
		].
		self add: {aKey. aValue.}.
	]

	keysAndValuesDo: aBlock := [
		self do: [:value | 
			aBlock valueWithArgs: value.
		].		
	]
	
	keys := [
		|keysList|
		keysList := List new.
		self do: [:value |
			keysList add: (value at: 1).
		].
		^ keysList.	
	]

	values := [
		|valueList|
		valueList := List new.
		self do: [:value |
			valueList add: (value at: 2).
		].
		^ valueList.			
	]

]

Base = Object [
	reflect: aBoolean := [^<PrimitiveCall baseReflect>.]
]

BaseLevel := Base new.

Point = Object [

	|x y|

	initialize := [x := 0. y := 0.]	
	x := [^ x.]
	y := [^ y.]
	x: aNumber := [x := aNumber asNumber.]
	y: aNumber := [y := aNumber asNumber.]
	asString := [^ x asString , ''@'' , y asString.]
	
]

Point3D = Point [

	|z|
	
	initialize := [super initialize. z := 0.]
	z := [^ z.]
	z: aNumber := [z := aNumber asNumber.]
	asString := [^ super asString , ''@'' , z asString.]
	
]

nil := UndefinedObject new.

true := True new.

false := False new.

''Loaded Kernel !'' print.

''Performing some tests....'' print.

(1 = 1) not print.

(1 + 2) print.

(true & true) print.

(true & false) print.

''hallo world !'' print.

x := 1.

x = 2 ifTrue: [
	[''this should not be printed.'' print.] value.
] ifFalse: [
	[''block evaluation successfull.'' print.] value.
].

dictionary := {''MetaTalk'' -> 666. ''List'' -> ''Rulez''.}.

dictionary print.

dictionary keys print.

dictionary values print.

3 asString print.

(1 to: 10) print.

(1 to: 10) do: [:i | (i * 2) print.].

(''con'',''catenation '',''is working'') print.
{''con'' . ''catenation '' . {''is working''.} .} print.

x := { {3.}. 5. ''string''.}.

(x indexOf: ''string'') print.

x indexAndValuesDo: [:index :value | index print. value print.].

p := Point3D new.

p z: 30.
p x: 1.

p print.

emptyClass := Class new.