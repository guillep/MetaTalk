String
    superclass: #Object;
    instanceSpecification: #(#variable #byte ).


String >> at: index [
    <primitive: 63>
]

String >> at: index put: aChar [
    <primitive: 64>
]

String >> byteAt: index put: aByte [
    <primitive: 61>
]

String >> size [
    <primitive: 62>
]

String >> == otherString [
    | len1 len2 c1 c2 |
    len1 := self size.
    len2 := otherString size.
    1 to: (len1 min: len2) do: [ :i | 
        c1 := (self  basicAt: i) + 1.
        c2 := (otherString basicAt: i) + 1.
        c1 = c2
            ifFalse: [ ^ false ] ].
    len1 = len2
        ifTrue: [ ^ true ].
	^ false
]

String >> , anotherString [
    ^ self copyReplaceFrom: self size + 1
        to: self size
        with: anotherString
]

String >> copyReplaceFrom: start to: stop with: replacementCollection [
    | newSequenceableCollection newSize endReplacement |
    newSize := self size - (stop - start + 1) + replacementCollection size.
    endReplacement := start - 1 + replacementCollection size.
    newSequenceableCollection := String new: newSize.
    newSequenceableCollection
        replaceFrom: 1
        to: start - 1
        with: self
        startingAt: 1.
    newSequenceableCollection
        replaceFrom: start
        to: endReplacement
        with: replacementCollection
        startingAt: 1.
    newSequenceableCollection
        replaceFrom: endReplacement + 1
        to: newSize
        with: self
        startingAt: stop + 1.
    ^ newSequenceableCollection
]

String >> replaceFrom: start to: stop with: replacement startingAt: repStart [
    "This destructively replaces elements from start to stop in the receiver 
    starting at index, repStart, in the sequenceable collection, 
    replacementCollection. Answer the receiver. No range checks are 
    performed."
    | index repOff |
    repOff := repStart - start.
    index := start - 1.
    [ (index := index + 1) < (stop + 1) ] whileTrue: [ self at: index put: (replacement at: repOff + index) ]
]

String >> print [
    | f |
    f := File new.
    f openReadWrite: './log.txt'.
    f position: f size.
    f nextPutAll: self.
    f cr.
    f close
]

String >> asString [
    ^ self
]