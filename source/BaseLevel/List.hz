List
    superclass: #Object;
    instanceSpecification: #(#pointers #words );
    instanceVariables: #(#head #tail).


List >> initialize [
    head := nil.
    tail := nil.
]

List >> size [
    nil = head ifTrue: [ ^ 0 ].
    nil = tail ifTrue: [ ^ 1 ].
    ^ 1 + tail size.
]

List >> isEmpty [
    ^ self size == 0
]

List >> head [
    ^ head
]

List >> tail [
    ^ tail
]

List >> add: anObject [
    self isEmpty ifTrue: [ ^ head := anObject ].
    nil = tail ifTrue: [ tail := List new add: anObject; yourself. ^ anObject ].
    ^ tail add: anObject.
]

List >> remove: anObject [
    tail head == anObject ifTrue: [ 
		tail := tail tail.
		^ self
	].
	tail remove: anObject.
]
    
List >> indexOf: anObject [
    self indexAndValuesDo: [:index :value |
        (value = anObject) ifTrue: [
            ^ index.    
        ].
    ].
    ^ nil.
]
    
List >> at: index [
    index = 1 ifTrue: [ ^ head ].
    ^ tail at: index - 1
]

List >> at: index put: anObject [
    index = 1 ifTrue: [ head := anObject ].
    ^ tail at: index - 1 put: anObject.
]

List >> = aList [
    |list|
    list := aList asList.
    (self size = list size) ifFalse: [^ false.].
    self indexAndValuesDo: [:index :value |
        (value = (list at: index)) ifFalse: [
            ^ false.    
        ].
    ].
    ^ true.
]
    
List >> , aList [
    | newList |
	newList := aList copy.
	newList basicAddAll: aList copy.
	^ newList
]

List >> basicAddAll: aList [
	tail == nil ifTrue: [ tail := aList. ^ self ].
    self tail basicAddAll: aList.
]
   
List >> do: aBlock [
    nil = head ifTrue: [ ^ nil ].
	aBlock valueWithArgs: { head }.
	nil = tail ifTrue: [ ^ nil ].
	tail do: aBlock.
]
    
List >> indexAndValuesDo: aBlock [
    |index|
    index := 1.
    self do: [:value |
        aBlock valueWithArgs: {index. value.}.
        index := index + 1.
    ].    
]

List >> asString [
    |str|
    str := 'List( '.
    self do: [:item | str := str , item asString , '. '.].
    ^ str , ')'.
]

List >> asList [
    ^ self.
]