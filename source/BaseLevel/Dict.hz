Dict = List [

	add: aKeyValueList := [
		(aKeyValueList asList size = 2)	ifTrue: [
				super add: aKeyValueList.
		] ifFalse: [
				^ nil.
		].
	]

	remove: aKey := [
		self do: [:value | 
			((value at: 1) = aKey) ifTrue: [
				super remove: value.
				^ value.
			].
		].	
	]

	keyOf: aValue := [
		self do: [:value | 
			((value at: 2) = value) ifTrue: [
				^ value at: 1.
			].
		].
		^ nil.	
	]

	atKey: aKey := [
		self do: [:value | 
			((value at: 1) = aKey) ifTrue: [
				^ value at: 2.
			].
		].
		^ nil.
	]

	atKey: aKey put: aValue := [
		self do: [:value | 
			((value at: 1) = aKey) ifTrue: [
				value at: 2 put: aValue.
			].
		].
		self add: {aKey. aValue.}.
	]

	keysAndValuesDo: aBlock := [
		self do: [:value | 
			aBlock valueWithArgs: value.
		].		
	]
	
	keys := [
		|keysList|
		keysList := List new.
		self do: [:value |
			keysList add: (value at: 1).
		].
		^ keysList.	
	]

	values := [
		|valueList|
		valueList := List new.
		self do: [:value |
			valueList add: (value at: 2).
		].
		^ valueList.			
	]

]