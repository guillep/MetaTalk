Dict
    superclass: #List.

Dict >> add: aKeyValueList [
    (aKeyValueList size = 2) ifTrue: [
        super add: aKeyValueList.
    ] ifFalse: [
        ^ nil.
    ].
]

Dict >> remove: aKey [
    self do: [:value | 
        ((value at: 1) = aKey) ifTrue: [
            super remove: value.
            ^ value.
        ].
    ].    
]

Dict >> keyOf: aValue [
    self do: [:value | 
        ((value at: 2) = value) ifTrue: [
            ^ value at: 1.
        ].
    ].
    ^ nil.    
]

Dict >> at: aKey [
    ^ self atKey: aKey
]

Dict >> atKey: aKey [
    self do: [:value | 
        ((value at: 1) = aKey) ifTrue: [
            ^ value at: 2.
        ].
    ].
    ^ nil.
]

Dict >> at: aKey put: aValue [
    self do: [:value | 
        ((value at: 1) = aKey) ifTrue: [
            ^ value at: 2 put: aValue.
        ].
    ].
    self add: {aKey. aValue.}.
]

Dict >> keysAndValuesDo: aBlock [
    self do: [:value | 
        aBlock valueWithArgs: value.
    ].        
]
    
Dict >> keys [
    |keysList|
    keysList := List new.
    self do: [:value |
        keysList add: (value at: 1).
    ].
    ^ keysList.    
]

Dict >> values [
    |valueList|
    valueList := List new.
    self do: [:value |
        valueList add: (value at: 2).
    ].
    ^ valueList.            
]