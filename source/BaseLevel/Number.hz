Number
	superclass: #Object;
	instanceSpecification: #(#pointers #words ).

Number >> initialize [
	<PrimitiveCall numberInitialize>
]

Number >> = aMagnitude [ 
	<PrimitiveCall numberEq>
]

Number >> + aNumber [
	<PrimitiveCall numberAdd>
]

Number >> - aNumber [
	<PrimitiveCall numberSub>
]

Number >> / aNumber  [
	<PrimitiveCall numberDiv>
]

Number >> * aNumber [
	<PrimitiveCall numberMul>
]

Number >> < aNumber [
	<PrimitiveCall numberLt>
]

Number >> > aNumber [
	<PrimitiveCall numberGt>
]

Number >> floor [
	<PrimitiveCall numberFloor>
]

Number >> ceil [
	<PrimitiveCall numberCeil>
]

Number >> to: aNumber [
	|iterator end list|
	list := {}.
	iterator := self.
	end := aNumber asNumber.
	[iterator < (end + 1).] whileTrue: [
		list add: iterator.
		iterator := iterator + 1.
	].
	^ list.
]

Number >> asNumber [
	^ self
]

Number >> asString [
	<PrimitiveCall numberAsString>
]