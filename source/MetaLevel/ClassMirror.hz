ClassMirror
    superclass: #AbstractMirror;
    instanceSpecification: #(#pointers #words );
    instanceVariables: #(#baseObj #classMirror #name #instanceVariables #methodSource #superMirror #methods).

ClassMirror >> allocate [
    <primitive: 70>
]
    
ClassMirror >> newWithBaseObject: baseObject [
	| mirror |
    mirror := ObjectMirror new.
	mirror setBaseObject: baseObject.
	mirror setClassMirror: self.
	^mirror.
	"^ self allocate initialize setBaseObject: baseObject"
]

ClassMirror >> initialize [
    
    "to behave like a class"
    superMirror := nil.
	"mirrorMethodDictionary := MethodDictionary new.
    mirrorFormat := nil."
    
    "basic object mirror things"
    baseObj := nil.
    classMirror := nil.
    
    "class mirror properties"
    name := nil.
    "methods := nil."
    instanceVariables := nil.
    methodSource := nil.
]

ClassMirror >> classMirror [
    ^ classMirror
]

ClassMirror >> setClassMirror: aClassMirror [
    ^ classMirror
]
    
ClassMirror >> baseObject [
    ^ baseObj
]

ClassMirror >> setBaseObject: aBaseObject [
    baseObj := aBaseObject.
]

ClassMirror >> subClass: aName instanceVariableNames: ivs [
    ^ (((Mirror on: Class) new super: self baseObject) instanceVariables: ivs) name: aName.
]

ClassMirror >> name [
    ^ name
]

ClassMirror >> name: aName [
    name := aName.
]

ClassMirror >> super [
    ^ superMirror
]

ClassMirror >> super: aBaseClass [
    superMirror := Mirror on: aBaseClass.
]

ClassMirror >> methods [
    methods = nil ifTrue: [
        ^ Dict new.
    ].
    ^ methods keys.
]

ClassMirror >> instanceVariables [
    ^ instanceVariables
]

ClassMirror >> instanceVariables: ivs [
    instanceVariables := ivs.        
]

ClassMirror >> atMethod: methodNameWithArgs put: codeAsString [
    (methodSource = nil) ifTrue: [
        methodSource := Dict new.    
    ].
    methodSource atKey: methodNameWithArgs put: codeAsString.
    self atMethod: methodNameWithArgs compile: codeAsString.
]

ClassMirror >> methodSourceOf: aMethodName [
    ^ methodSource atKey: aMethodName.    
]
    
ClassMirror >> isClass [
    ^ true
]
    
ClassMirror >> indexOf: varName [
    ^ instanceVariables indexOf: varName
]

ClassMirror >> methodAt: aMethodName [
    | method |
    method := methods atKey: aMethodName.
    (method = nil) ifTrue: [
        superMirror = nil ifTrue: [
            ^ nil.    
        ].
        ^ superMirror methodAt: aMethodName.
    ].
    ^ method
]

ClassMirror >> atMethod: methodNameWithArgs compile: codeAsString [
    "<PrimitiveCall mirrorAtMethodPut>"
	^ self
]